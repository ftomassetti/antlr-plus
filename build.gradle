buildscript {
    ext.kotlin_version = '1.3.60'
    ext.antlrVersion = '4.7.2'
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jlleitschuh.gradle.ktlint" version "9.0.0"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'antlr'
apply plugin: 'maven-publish'

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://jitpack.io' }
    jcenter()
}

group = 'com.strumenta'
version = '0.2'

def generatedMain = "generated-src/antlr/main"
def generatedMainFile = file(generatedMain)

dependencies {
    antlr "org.antlr:antlr4:${antlrVersion}"
    compile "org.antlr:antlr4-runtime:${antlrVersion}"
    testCompile 'junit:junit:4.12'
    testCompile group: 'com.google.guava', name: 'guava', version: '19.0'

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "com.github.ftomassetti:kolasu:2ab4b6e201"

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile 'junit:junit:4.12'
    compile 'com.github.julianthome:inmemantlr-api:1.6'
}

configurations.all() {
    resolutionStrategy.force "org.antlr:antlr4-runtime:$antlrVersion"
    resolutionStrategy.force "org.antlr:antlr4-tool:$antlrVersion"
}

generateGrammarSource {
    inputs.files fileTree('src/main/antlr').include('**/*.g4')
    maxHeapSize = "64m"
    arguments += ['-package', 'com.strumenta.antlrplus.antlrparser']
    outputDirectory = file(generatedMain + "/com/strumenta/antlrplus/antlrparser")
}
compileJava.dependsOn generateGrammarSource
compileJava.source generatedMainFile, sourceSets.main.java
//sourceSets {
//    antlrdeps {
//        java.srcDir 'src/main/antlr-deps/'
//    }
//    generated {
//        java.srcDir 'generated-src/antlr/main/'
//    }
//}
//compileJava.source sourceSets.antlrdeps.java, sourceSets.generated.java, sourceSets.main.java
compileKotlin {
    source generatedMainFile, sourceSets.main.java, sourceSets.main.kotlin
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"]
    dependsOn generateGrammarSource
}


generateTestGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-package', 'com.strumenta.antlrplus.python']
    outputDirectory = new File("generated-src/antlr/test/com/strumenta/antlrplus/python".toString())
}
compileTestJava.dependsOn generateTestGrammarSource
sourceSets {
    test_generated {
        java.srcDir 'generated-src/antlr/test/'
    }
}
compileTestJava.source sourceSets.test_generated.java, sourceSets.test.java

clean{
    delete "generated-src"
}

idea {
    module {
//        sourceDirs += file("generated-src/antlr/main")
//        sourceDirs += file("src/main/antlr-deps")
//        testSourceDirs += file("generated-src/antlr/test")
        mkdir generatedMain
        sourceDirs += generatedMainFile
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
